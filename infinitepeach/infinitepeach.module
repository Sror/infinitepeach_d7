<?php

/**
 * @file
 * Do infinitepeach stuff
 */

/**
 * Implementation of hook_menu
 *
 * @return array
 */
function infinitepeach_menu() {
  $items['create-book/%node'] = array(
    'title' => 'Write Book',
    'description' => 'Create the pages for a book',
    'page callback' => 'infinitepeach_create_book',
    'page arguments' => array(1),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['my-books'] = array(
  	'title' => 'My Books',
    'description' => 'A list of books created.',
    'page callback' => 'infinitepeach_my_books',
    'access arguments' => array('create book content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function infinitepeach_my_books($uid = NULL) {
	global $user;

	if (!isset($uid)) {
		$uid = $user->uid;
	}

	$query = new EntityFieldQuery();
	$query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('uid', $uid)
    ->propertyOrderBy('created', 'DESC')
    ->pager(10);

  $result = $query->execute();
  $content = array();

  if (empty($result)) {
    $content['nodes']['#markup'] = t('No books created. Create one!');
  }
  else {
    $content['nodes'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('teaser-list'),
      ),
    );
    foreach ($result['node'] as $node) {
      $node = node_load($node->nid);
      $content['nodes'][$node->nid] = node_view($node, 'teaser');
    }
  }

  return $content;
}

/**
 * Callback for generating all book pieces
 *
 * @param object $node
 */
function infinitepeach_create_book($node) {
	$book_directory = 'public://book';
	$source = drupal_get_path('module', 'infinitepeach') . '/templates';
	//create book directory
	file_prepare_directory($book_directory, FILE_CREATE_DIRECTORY);

	//copy common directories
	$directories = array(
		'fonts',
		'images',
		'js',
		'styles',
		'inc',
	);
	foreach ($directories as $directory) {
		$directory_source = $source . '/' . $directory;
		$directory_destination = $book_directory . '/' . $directory;
		infinitepeach_recurse_copy($directory_source, $directory_destination);
	}

	//copy common files
	$files = array(
		'navigation.htm',
	);
	foreach ($files as $file) {
		file_unmanaged_copy($source . '/' . $file, $book_directory . '/' . $file, FILE_EXISTS_REPLACE);
	}

	$dossiers_directory = 'public://book/styles/dossiers';
	file_prepare_directory($dossiers_directory, FILE_CREATE_DIRECTORY);

	$pieces = array(
		'cover',
		'page',
		'toc',
	);
	foreach ($pieces as $piece) {
		module_load_include('inc', 'infinitepeach', 'includes/' . $piece);
		call_user_func('infinitepeach_create_' . $piece, $node);
	}
}

function infinitepeach_get_header($title, $css, $article = TRUE) {
	module_load_include('inc', 'infinitepeach', 'templates/header');
	return infinitepeach_header_common($title, $css, $article);
}

function infinitepeach_get_navigation($cur, $prev, $next) {
	module_load_include('inc', 'infinitepeach', 'templates/navigation');
	return infinitepeach_navigation_common($cur, $prev, $next);
}

function infinitepeach_recurse_copy($src, $dst) {
	$dir = opendir($src);
	file_prepare_directory($dst, FILE_CREATE_DIRECTORY);
	while(false !== ( $file = readdir($dir))) {
		if (($file != '.') && ($file != '..')) {
			if (is_dir($src . '/' . $file)) {
				infinitepeach_recurse_copy($src . '/' . $file, $dst . '/' . $file);
			}
			else {
				file_unmanaged_copy($src . '/' . $file, $dst . '/' . $file, FILE_EXISTS_REPLACE);
			}
		}
	}
	closedir($dir);
}

function infinitepeach_format_number($num) {
	return sprintf("%02d", $num);
}